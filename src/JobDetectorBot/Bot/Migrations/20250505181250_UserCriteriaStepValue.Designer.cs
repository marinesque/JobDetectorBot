// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bot.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20250505181250_UserCriteriaStepValue")]
    partial class UserCriteriaStepValue
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bot.Domain.DataAccess.Model.CriteriaStep", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор шага критерия");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCustom")
                        .HasColumnType("boolean")
                        .HasColumnName("IsCustom")
                        .HasComment("Возможно ли кастомное значение");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название шага");

                    b.Property<int>("OrderBy")
                        .HasColumnType("integer")
                        .HasColumnName("OrderBy")
                        .HasComment("Порядок сортировки");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Prompt")
                        .HasComment("Отображаемое значение для шага");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип значения");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CriteriaStep", "public", t =>
                        {
                            t.HasComment("Таблица шагов критериев");
                        });
                });

            modelBuilder.Entity("Bot.Domain.DataAccess.Model.CriteriaStepValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор значения шага критерия");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CriteriaStepId")
                        .HasColumnType("bigint")
                        .HasColumnName("CriteriaStepId")
                        .HasComment("Идентификатор шага критерия");

                    b.Property<int?>("OrderBy")
                        .HasColumnType("integer")
                        .HasColumnName("OrderBy")
                        .HasComment("Порядок сортировки значения");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Prompt")
                        .HasComment("Отображаемое значение шага критерия");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Value")
                        .HasComment("Значение шага критерия");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaStepId", "Value")
                        .IsUnique();

                    b.ToTable("CriteriaStepValues", "public", t =>
                        {
                            t.HasComment("Таблица значений шагов критериев");
                        });
                });

            modelBuilder.Entity("Bot.Domain.DataAccess.Model.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор пользователя");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CurrentCriteriaStep")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentCriteriaStep")
                        .HasComment("Текущий шаг ввода критериев");

                    b.Property<int>("CurrentCriteriaStepValueIndex")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentCriteriaStepValueIndex")
                        .HasComment("Текущий индекс значения в CriteriaStepValues");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastUpdated")
                        .HasComment("Время последнего обновления");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("State")
                        .HasComment("Текущее состояние пользователя");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint")
                        .HasColumnName("TelegramId")
                        .HasComment("Идентификатор пользователя в Telegram");

                    b.HasKey("Id");

                    b.HasIndex("TelegramId")
                        .IsUnique();

                    b.ToTable("Users", "public", t =>
                        {
                            t.HasComment("Таблица пользователей");
                        });
                });

            modelBuilder.Entity("Bot.Domain.DataAccess.Model.UserCriteriaStepValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Id")
                        .HasComment("Уникальный идентификатор");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("now()")
                        .HasComment("Дата создания записи");

                    b.Property<long>("CriteriaStepId")
                        .HasColumnType("bigint")
                        .HasColumnName("CriteriaStepId")
                        .HasComment("Идентификатор шага критерия");

                    b.Property<long?>("CriteriaStepValueId")
                        .HasColumnType("bigint")
                        .HasColumnName("CriteriaStepValueId")
                        .HasComment("Идентификатор значения шага критерия (если выбрано из списка)");

                    b.Property<string>("CustomValue")
                        .HasColumnType("text")
                        .HasColumnName("CustomValue")
                        .HasComment("Пользовательское значение (если введено вручную)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("now()")
                        .HasComment("Дата последнего обновления");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserId")
                        .HasComment("Идентификатор пользователя");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaStepId");

                    b.HasIndex("CriteriaStepValueId");

                    b.HasIndex("UserId", "CriteriaStepId");

                    b.ToTable("UserCriteriaStepValues", "public", t =>
                        {
                            t.HasComment("Таблица значений критериев пользователя");
                        });
                });

            modelBuilder.Entity("Bot.Domain.DataAccess.Model.CriteriaStepValue", b =>
                {
                    b.HasOne("Bot.Domain.DataAccess.Model.CriteriaStep", "CriteriaStep")
                        .WithMany("CriteriaStepValues")
                        .HasForeignKey("CriteriaStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CriteriaStep");
                });

            modelBuilder.Entity("Bot.Domain.DataAccess.Model.UserCriteriaStepValue", b =>
                {
                    b.HasOne("Bot.Domain.DataAccess.Model.CriteriaStep", "CriteriaStep")
                        .WithMany()
                        .HasForeignKey("CriteriaStepId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Bot.Domain.DataAccess.Model.CriteriaStepValue", "CriteriaStepValue")
                        .WithMany()
                        .HasForeignKey("CriteriaStepValueId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bot.Domain.DataAccess.Model.User", "User")
                        .WithMany("UserCriteriaStepValues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CriteriaStep");

                    b.Navigation("CriteriaStepValue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bot.Domain.DataAccess.Model.CriteriaStep", b =>
                {
                    b.Navigation("CriteriaStepValues");
                });

            modelBuilder.Entity("Bot.Domain.DataAccess.Model.User", b =>
                {
                    b.Navigation("UserCriteriaStepValues");
                });
#pragma warning restore 612, 618
        }
    }
}
