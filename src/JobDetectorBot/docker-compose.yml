version: '3.8'

services:
  bot:
    build:
      context: .
      dockerfile: Bot/Dockerfile
    container_name: bot
    restart: always
    depends_on:
      - bot-postgres
    environment:
      - ConnectionStrings__PostgreSQL=Host=localhost;Database=botdb;Username=postgres;Password=271216
      - Telegram__Token=8057264807:AAG9by6TzrbJQ4p2uLwnAI02slOr7S3sbiE
    ports:
      - "5000:80"
    networks:
      - bot-network

  bot-postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: botdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - bot-network

  mongo:
    image: mongo:7.0
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo_data:/data/db

  redis:
    image: redis:7.2
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  vacancyservice:
    build:
      context: .
      dockerfile: VacancyService/Dockerfile
    container_name: vacancyservice
    restart: always
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - Mongo__ConnectionString=mongodb://root:example@mongo:27017
      - Redis__Connection=redis:6379
    depends_on:
      - mongo
      - redis

volumes:
  postgres_data:
  mongo_data:
  redis_data:

networks:
  bot-network:
    driver: bridge